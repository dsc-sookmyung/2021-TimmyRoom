{"version":3,"sources":["components/Center.js","components/Button.js","components/LogOutMain.js","components/LogInMain.js","reducers/users.js","components/LogInPage.js","components/ErrorMessage.js","components/SignUpPage.js","App.js","reportWebVitals.js","reducers/index.js","index.js"],"names":["Center","styled","div","Button","button","LogOutMain","to","style","marginBottom","LogInMain","REGISTER_USER","LOGIN_USER","registerUser","data","a","dispatch","axios","post","registerAction","type","loginUser","loginAction","reducer","state","action","nickname","phone","role","LoginBox","LogInPage","useDispatch","useState","setNickname","onChangeNickname","useCallback","e","target","value","setPhone","onChangePhone","onSubmitForm","onSubmit","aria-label","htmlFor","id","onChange","autoFocus","pattern","maxLength","title","ErrorMessage","InputBox","SignUpPage","setRole","onChangeRole","checked","setRegistered","checkRegistered","registerError","onClick","backgroundColor","disabled","height","fontSize","borderRadius","App","login","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","user","createStoreWithMMiddleware","applyMiddleware","promiseMiddleware","ReduxThunk","createStore","ReactDOM","render","store","window","__REDUX_DEVTOOLS_EXTENSION__","document","getElementById"],"mappings":"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","file":"static/js/main.f4a80665.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nconst Center = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: 100%;\r\n    height: 100vh;\r\n`;\r\n\r\nexport default Center;\r\n","import styled from 'styled-components';\r\n\r\nconst Button = styled.button`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: 25rem;\r\n    height: 13rem;\r\n    font-size: 3.1rem;\r\n    font-weight: 700;\r\n    cursor: pointer;\r\n    border-radius: 10px;\r\n    border-color: #ffd300;\r\n    color: #000;\r\n    background-color: #ffd300;\r\n\r\n    &:focus {\r\n        outline-color: #ffd300;\r\n    }\r\n\r\n    @media screen and (min-width: 768px) {\r\n        width: 45rem;\r\n        height: 20rem;\r\n        font-size: 5.5rem;\r\n    }\r\n`;\r\n\r\nexport default Button;\r\n","import { Link } from 'react-router-dom';\r\n\r\nimport Center from './Center';\r\nimport Button from './Button';\r\n\r\nconst LogOutMain = () => {\r\n    return (\r\n        <Center>\r\n            <Link to=\"/login\" style={{ marginBottom: '2rem' }}>\r\n                <Button>로그인하러 가기</Button>\r\n            </Link>\r\n            <Link to=\"/signup\">\r\n                <Button>회원가입하러 가기</Button>\r\n            </Link>\r\n        </Center>\r\n    );\r\n};\r\n\r\nexport default LogOutMain;\r\n","import Center from './Center';\r\nimport Button from './Button';\r\n\r\nconst LogInMain = () => {\r\n    return (\r\n        <Center>\r\n            <Button>로그인이</Button>\r\n            <Button>된 상태</Button>\r\n        </Center>\r\n    );\r\n};\r\n\r\nexport default LogInMain;\r\n","import axios from 'axios';\r\n\r\nexport const initialState = {\r\n    nickname: '',\r\n    phone: '',\r\n    role: 'nondeveloper',\r\n};\r\n\r\n// action type\r\nexport const REGISTER_USER = 'REGISTER_USER';\r\nexport const LOGIN_USER = 'LOGIN_USER';\r\n\r\nexport const registerUser = async (data) => {\r\n    return (dispatch) => {\r\n        axios.post('http://localhost:8080/users', data);\r\n        dispatch(registerAction(data));\r\n    };\r\n};\r\n\r\n// action creator\r\nexport const registerAction = (data) => {\r\n    return {\r\n        type: REGISTER_USER,\r\n        data,\r\n    };\r\n};\r\n\r\nexport const loginUser = async (data) => {\r\n    return (dispatch) => {\r\n        axios.post('http://localhost:8080/login', data);\r\n        dispatch(loginAction(data));\r\n    };\r\n};\r\n\r\nexport const loginAction = (data) => {\r\n    return {\r\n        type: LOGIN_USER,\r\n        data,\r\n    };\r\n};\r\n\r\nconst reducer = (state = {}, action) => {\r\n    switch (action.type) {\r\n        case REGISTER_USER:\r\n            return {\r\n                ...state,\r\n                nickname: action.data.nickname,\r\n                phone: action.data.phone,\r\n                role: action.data.role,\r\n            };\r\n        case LOGIN_USER:\r\n            return {\r\n                nickname: action.data.nickname,\r\n                phone: action.data.phone,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n","import { useState, useCallback } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport styled from 'styled-components';\r\n\r\nimport Center from './Center';\r\nimport Button from './Button';\r\nimport { loginUser } from '../reducers/users';\r\n\r\nconst LoginBox = styled.div`\r\n    & > label {\r\n        display: block;\r\n        margin-bottom: 0.5rem;\r\n        font-size: 2rem;\r\n        color: #ffd300;\r\n\r\n        @media screen and (min-width: 768px) {\r\n            font-size: 3rem;\r\n        }\r\n    }\r\n\r\n    & > input {\r\n        width: 30rem;\r\n        height: 5rem;\r\n        margin-bottom: 3rem;\r\n        font-size: 2.4rem;\r\n        border-radius: 6px;\r\n\r\n        @media screen and (min-width: 768px) {\r\n            width: 50rem;\r\n        }\r\n    }\r\n\r\n    & ~ button {\r\n        width: 30rem;\r\n        height: 6rem;\r\n        font-size: 3rem;\r\n\r\n        @media screen and (min-width: 768px) {\r\n            width: 50rem;\r\n        }\r\n    }\r\n`;\r\n\r\nconst LogInPage = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const [nickname, setNickname] = useState('');\r\n    const onChangeNickname = useCallback(\r\n        (e) => {\r\n            setNickname(e.target.value);\r\n        },\r\n        [nickname],\r\n    );\r\n\r\n    const [phone, setPhone] = useState('');\r\n    const onChangePhone = useCallback(\r\n        (e) => {\r\n            setPhone(e.target.value);\r\n        },\r\n        [phone],\r\n    );\r\n\r\n    const onSubmitForm = useCallback(() => {\r\n        dispatch(loginUser({ nickname, phone }));\r\n    }, [phone]);\r\n\r\n    return (\r\n        <Center>\r\n            <form onSubmit={onSubmitForm} aria-label=\"로그인 폼입니다.\">\r\n                <LoginBox>\r\n                    <label htmlFor=\"nickname\">닉네임을 입력해주세요</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        id=\"nickname\"\r\n                        value={nickname}\r\n                        onChange={onChangeNickname}\r\n                        autoFocus\r\n                    />\r\n                    <label htmlFor=\"phone\">전화번호를 입력해주세요</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        id=\"phone\"\r\n                        value={phone}\r\n                        onChange={onChangePhone}\r\n                        pattern=\"[0-9]{3}-[0-9]{4}-[0-9]{4}\"\r\n                        maxLength=\"13\"\r\n                        title=\"010-0000-0000 형식으로 입력해주세요.\"\r\n                    />\r\n                </LoginBox>\r\n                <Button type=\"submit\">로그인하기</Button>\r\n            </form>\r\n        </Center>\r\n    );\r\n};\r\n\r\nexport default LogInPage;\r\n","import styled from 'styled-components';\n\nconst ErrorMessage = styled.div`\n    width: 30rem;\n    font-size: 2rem;\n    color: red;\n\n    @media screen and (min-width: 768px) {\n        width: 50rem;\n        font-size: 2.5rem;\n    }\n`;\n\nexport default ErrorMessage;\n","import styled from 'styled-components';\nimport { useState, useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport axios from 'axios';\n\nimport Center from './Center';\nimport Button from './Button';\nimport { registerUser } from '../reducers/users';\nimport ErrorMessage from './ErrorMessage';\n\nconst InputBox = styled.div`\n    display: flex;\n    align-items: center;\n    width: 30rem;\n    margin-bottom: 3rem;\n\n    @media screen and (min-width: 768px) {\n        width: 50rem;\n    }\n\n    & > input {\n        width: 4rem;\n        height: 4rem;\n        margin-right: 2.7rem;\n    }\n\n    & > label {\n        font-size: 2.1rem;\n        color: #ffd300;\n\n        @media screen and (min-width: 768px) {\n            font-size: 4rem;\n        }\n    }\n\n    & ~ div {\n        display: flex;\n        flex-direction: column;\n        width: 30rem;\n        // margin-bottom: 3rem;\n\n        @media screen and (min-width: 768px) {\n            width: 50rem;\n        }\n\n        & > label {\n            display: inline-block;\n            margin-bottom: 0.5rem;\n            font-size: 2rem;\n            color: #ffd300;\n\n            @media screen and (min-width: 768px) {\n                font-size: 3rem;\n            }\n        }\n\n        & > input {\n            margin-bottom: 3rem;\n        }\n    }\n\n    & ~ button {\n        width: 30rem;\n        height: 6rem;\n        font-size: 3rem;\n\n        @media screen and (min-width: 768px) {\n            width: 50rem;\n        }\n    }\n`;\n\nconst SignUpPage = () => {\n    const dispatch = useDispatch();\n\n    const [role, setRole] = useState('nondeveloper');\n    const onChangeRole = useCallback(\n        (e) => {\n            if (e.target.checked) {\n                setRole('developer');\n            } else {\n                setRole('nondeveloper');\n            }\n        },\n        [role],\n    );\n\n    const [nickname, setNickname] = useState('');\n    const onChangeNickname = useCallback(\n        (e) => {\n            setNickname(e.target.value);\n        },\n        [nickname],\n    );\n\n    const [phone, setPhone] = useState('');\n    const onChangePhone = useCallback(\n        (e) => {\n            setPhone(e.target.value);\n        },\n        [phone],\n    );\n\n    // 이미 등록된 사용자 혹은 전화번호인지 확인\n    const [registered, setRegistered] = useState(true);\n\n    const checkRegistered = () => {\n        // 등록된 사용자인지 확인\n        // 예를 들어, 등록된 사용자다.\n        setRegistered(true);\n    };\n\n    const [registerError, setRegisterError] = useState(false);\n\n    const renderSubmitBtn = useCallback(() => {\n        // 중복된 사용자라면, button disable\n        if (registerError) {\n            return (\n                <Button\n                    type=\"submit\"\n                    onClick={checkRegistered}\n                    style={{\n                        backgroundColor: 'rgba(255,211,0,0.5)',\n                    }}\n                    disabled\n                >\n                    회원가입하기\n                </Button>\n            );\n        }\n\n        return (\n            <Button type=\"submit\" onClick={checkRegistered}>\n                회원가입하기\n            </Button>\n        );\n    }, [registerError]);\n\n    const onSubmitForm = useCallback(() => {\n        // 전화번호 중복 확인\n        // if(){ //중복이라면\n        //     setRegistered(true);\n        // }\n\n        // 중복이라면 경고 메세지 띄우고,\n        // if (registered) {\n        //     setPhone('');\n        //     return alert('이미 등록된 사용자입니다. 전화번호를 다시 입력해주십시오.');\n        // }\n        dispatch(registerUser({ role, phone, nickname }));\n    }, [role, phone, nickname]);\n\n    return (\n        <Center>\n            <form onSubmit={onSubmitForm} aria-label=\"회원가입 폼입니다.\">\n                <InputBox>\n                    <input type=\"checkbox\" id=\"role\" value={role} onClick={onChangeRole} />\n                    <label htmlFor=\"role\">개발자라면 클릭해주세요.</label>\n                </InputBox>\n                <div>\n                    <label htmlFor=\"nickname\">닉네임을 입력해주세요</label>\n                    <input\n                        type=\"text\"\n                        id=\"nickname\"\n                        value={nickname}\n                        onChange={onChangeNickname}\n                        autoFocus\n                        style={{\n                            height: '5rem',\n                            fontSize: '2.4rem',\n                            borderRadius: '6px',\n                        }}\n                    />\n                    <label htmlFor=\"phone\">전화번호를 입력해주세요</label>\n                    <input\n                        type=\"text\"\n                        id=\"phone\"\n                        value={phone}\n                        onChange={onChangePhone}\n                        pattern=\"[0-9]{3}-[0-9]{4}-[0-9]{4}\"\n                        maxLength=\"13\"\n                        title=\"010-0000-0000 형식으로 입력해주세요.\"\n                        style={{\n                            height: '5rem',\n                            fontSize: '2.4rem',\n                            borderRadius: '6px',\n                        }}\n                    />\n                    {registerError && <ErrorMessage>이미 등록된 전화번호입니다.</ErrorMessage>}\n                </div>\n                <Button type=\"submit\">회원가입하기</Button>\n            </form>\n        </Center>\n    );\n};\n\nexport default SignUpPage;\n","import { useState } from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\n\r\nimport LogOutMain from './components/LogOutMain';\r\nimport LogInMain from './components/LogInMain';\r\nimport LogInPage from './components/LogInPage';\r\nimport SignUpPage from './components/SignUpPage';\r\n\r\nconst App = () => {\r\n    const [login, setLogin] = useState(false);\r\n\r\n    return (\r\n        <Router>\r\n            <Switch>\r\n                {login ? (\r\n                    <Route exact path=\"/\" component={LogInMain} />\r\n                ) : (\r\n                    <Route exact path=\"/\" component={LogOutMain} />\r\n                )}\r\n                <Route exact path=\"/login\" component={LogInPage} />\r\n                <Route exact path=\"/signup\" component={SignUpPage} />\r\n            </Switch>\r\n        </Router>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { combineReducers } from 'redux';\r\n\r\nimport user from './users';\r\n\r\nconst rootReducer = combineReducers({\r\n    user,\r\n});\r\n\r\nexport default rootReducer;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport './index.css';\r\n\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport rootReducer from './reducers/index';\r\nimport promiseMiddleware from 'redux-promise';\r\nimport ReduxThunk from 'redux-thunk';\r\n\r\nconst createStoreWithMMiddleware = applyMiddleware(\r\n    promiseMiddleware,\r\n    ReduxThunk,\r\n)(createStore);\r\n\r\nReactDOM.render(\r\n    <Provider\r\n        store={createStoreWithMMiddleware(\r\n            rootReducer,\r\n            window.__REDUX_DEVTOOLS_EXTENSION__ &&\r\n                window.__REDUX_DEVTOOLS_EXTENSION__(),\r\n        )}\r\n    >\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}