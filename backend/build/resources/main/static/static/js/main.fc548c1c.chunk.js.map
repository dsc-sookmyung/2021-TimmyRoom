{"version":3,"sources":["components/Center.js","components/Button.js","components/LogOutMain.js","components/LogInMain.js","components/LogInPage.js","reducers/users.js","components/ErrorMessage.js","components/SignUpPage.js","App.js","reportWebVitals.js","reducers/index.js","index.js"],"names":["Center","styled","div","Button","button","LogOutMain","to","style","marginBottom","LogInMain","LogInPage","useState","phone","setPhone","onChangePhone","useCallback","e","target","value","htmlFor","display","fontSize","color","type","id","autoFocus","onChange","placeholder","pattern","maxLength","title","height","initialState","role","REGISTER_USER","reducer","state","action","console","log","data","ErrorMessage","InputBox","SignUpPage","a","axios","get","getUserApi","dispatch","useDispatch","setRole","onChangeRole","checked","registered","setRegistered","checkRegistered","registerError","setRegisterError","renderSubmitBtn","onClick","width","backgroundColor","disabled","onSubmitForm","onSubmit","aria-label","flexDirection","App","login","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","user","createStoreWithMMiddleware","applyMiddleware","promiseMiddleware","ReduxThunk","createStore","ReactDOM","render","store","window","__REDUX_DEVTOOLS_EXTENSION__","document","getElementById"],"mappings":"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","file":"static/js/main.fc548c1c.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nconst Center = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: 100%;\r\n    height: 100vh;\r\n`;\r\n\r\nexport default Center;\r\n","import styled from 'styled-components';\r\n\r\nconst Button = styled.button`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: 25rem;\r\n    height: 13rem;\r\n    border: none;\r\n    font-size: 31px;\r\n    font-weight: 700;\r\n    cursor: pointer;\r\n    color: #000;\r\n    background-color: #ffd300;\r\n\r\n    &:focus {\r\n        outline-color: #ffd300;\r\n    }\r\n\r\n    @media screen and (min-width: 768px) {\r\n        width: 45rem;\r\n        height: 20rem;\r\n        font-size: 55px;\r\n    }\r\n`;\r\n\r\nexport default Button;\r\n","import { Link } from 'react-router-dom';\r\n\r\nimport Center from './Center';\r\nimport Button from './Button';\r\n\r\nconst LogOutMain = () => {\r\n    return (\r\n        <Center>\r\n            <Link to=\"/login\" style={{ marginBottom: '2rem' }}>\r\n                <Button>로그인하러 가기</Button>\r\n            </Link>\r\n            <Link to=\"/signup\">\r\n                <Button>회원가입하러 가기</Button>\r\n            </Link>\r\n        </Center>\r\n    );\r\n};\r\n\r\nexport default LogOutMain;\r\n","import Center from './Center';\r\nimport Button from './Button';\r\n\r\nconst LogInMain = () => {\r\n    return (\r\n        <Center>\r\n            <Button>로그인이</Button>\r\n            <Button>된 상태</Button>\r\n        </Center>\r\n    );\r\n};\r\n\r\nexport default LogInMain;\r\n","import { useState, useCallback } from 'react';\r\n\r\nimport Center from './Center';\r\nimport Button from './Button';\r\n\r\nconst LogInPage = () => {\r\n    const [phone, setPhone] = useState('');\r\n    const onChangePhone = useCallback(\r\n        (e) => {\r\n            setPhone(e.target.value);\r\n        },\r\n        [phone],\r\n    );\r\n\r\n    return (\r\n        <Center>\r\n            <h1>로그인</h1>\r\n            <label\r\n                htmlFor=\"phone\"\r\n                style={{\r\n                    display: 'inline-block',\r\n                    marginBottom: '0.5rem',\r\n                    fontSize: '2rem',\r\n                    color: '#ffd300',\r\n                }}\r\n            >\r\n                전화번호를 입력해주세요\r\n            </label>\r\n            <input\r\n                type=\"text\"\r\n                id=\"phone\"\r\n                value={phone}\r\n                autoFocus\r\n                onChange={onChangePhone}\r\n                placeholder=\"전화번호를 입력해주세요.\"\r\n                pattern=\"[0-9]{3}-[0-9]{4}-[0-9]{4}\"\r\n                maxLength=\"13\"\r\n                title=\"010-0000-0000 형식으로 입력해주세요.\"\r\n                style={{\r\n                    height: '5rem',\r\n                    fontSize: '2.4rem',\r\n                }}\r\n            />\r\n        </Center>\r\n    );\r\n};\r\n\r\nexport default LogInPage;\r\n","export const initialState = {\r\n    role: 'nondeveloper',\r\n    phone: '',\r\n};\r\n\r\n// action type\r\nexport const REGISTER_USER = 'REGISTER_USER';\r\n\r\n// action creator\r\nexport const registerAction = (data) => {\r\n    console.log(data);\r\n    return {\r\n        type: REGISTER_USER,\r\n        data,\r\n    };\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case REGISTER_USER:\r\n            console.log(action.data);\r\n            return {\r\n                ...state,\r\n                role: action.data.role,\r\n                phone: action.data.phone,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n","import styled from 'styled-components';\n\nconst ErrorMessage = styled.div`\n    width: 30rem;\n    font-size: 2rem;\n    color: red;\n`;\n\nexport default ErrorMessage;","import styled from 'styled-components';\nimport { useState, useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport axios from 'axios';\n\nimport Center from './Center';\nimport Button from './Button';\nimport { registerAction } from '../reducers/users';\nimport ErrorMessage from './ErrorMessage';\n\nconst InputBox = styled.div`\n    display: flex;\n    align-items: center;\n    width: 30rem;\n    margin-bottom: 3rem;\n\n    & > input {\n        width: 4rem;\n        height: 4rem;\n        margin-right: 2.7rem;\n    }\n\n    & > label {\n        font-size: 4rem;\n        color: #ffd300;\n    }\n`;\n\nconst SignUpPage = () => {\n    const getUserApi = async () => {\n        return axios.get('http://localhost:8080/users');\n    };\n    getUserApi();\n\n    const dispatch = useDispatch();\n\n    const [role, setRole] = useState('nondeveloper');\n    const onChangeRole = useCallback(\n        (e) => {\n            if (e.target.checked) {\n                setRole('developer');\n            } else {\n                setRole('nondeveloper');\n            }\n        },\n        [role],\n    );\n\n    const [phone, setPhone] = useState('');\n    const onChangePhone = useCallback(\n        (e) => {\n            setPhone(e.target.value);\n        },\n        [phone],\n    );\n\n    // 이미 등록된 사용자 혹은 전화번호인지 확인\n    const [registered, setRegistered] = useState(false);\n\n    const checkRegistered = () => {\n        // 등록된 사용자인지 확인\n        // 예를 들어, 등록된 사용자다.\n        setRegistered(true);\n    };\n\n    const [registerError, setRegisterError] = useState(false);\n\n    const renderSubmitBtn = useCallback(() => {\n        // 중복된 사용자라면, button disable\n        if (registerError) {\n            return (\n                <Button\n                    type=\"submit\"\n                    onClick={checkRegistered}\n                    style={{\n                        width: '30rem',\n                        height: '6rem',\n                        fontSize: '3rem',\n                        backgroundColor: 'rgba(255,211,0,0.5)',\n                    }}\n                    disabled\n                >\n                    회원가입하기\n                </Button>\n            );\n        }\n\n        return (\n            <Button\n                type=\"submit\"\n                onClick={checkRegistered}\n                style={{\n                    width: '30rem',\n                    height: '6rem',\n                    fontSize: '3rem',\n                }}\n            >\n                회원가입하기\n            </Button>\n        );\n    }, [registerError]);\n\n    const onSubmitForm = useCallback(() => {\n        // 이미 등록된 사용자라면, error 문구 보이게\n        if (registered) {\n            return setRegisterError(true);\n        }\n        dispatch(registerAction({ role, phone }));\n    }, [role, phone]);\n\n    return (\n        <Center>\n            <form onSubmit={onSubmitForm} aria-label=\"회원가입 폼입니다.\">\n                <InputBox>\n                    <input type=\"checkbox\" id=\"role\" value={role} onClick={onChangeRole} />\n                    <label htmlFor=\"role\">개발자라면 클릭해주세요.</label>\n                </InputBox>\n                <div\n                    style={{\n                        display: 'flex',\n                        flexDirection: 'column',\n                        width: '30rem',\n                        marginBottom: '3rem',\n                    }}\n                >\n                    <label\n                        htmlFor=\"phone\"\n                        style={{\n                            display: 'inline-block',\n                            marginBottom: '0.5rem',\n                            fontSize: '2rem',\n                            color: '#ffd300',\n                        }}\n                    >\n                        전화번호를 입력해주세요\n                    </label>\n                    <input\n                        type=\"text\"\n                        id=\"phone\"\n                        value={phone}\n                        autoFocus\n                        onChange={onChangePhone}\n                        placeholder=\"전화번호를 입력해주세요.\"\n                        pattern=\"[0-9]{3}-[0-9]{4}-[0-9]{4}\"\n                        maxLength=\"13\"\n                        title=\"010-0000-0000 형식으로 입력해주세요.\"\n                        style={{\n                            height: '5rem',\n                            fontSize: '2.4rem',\n                        }}\n                    />\n                    {registerError && <ErrorMessage>이미 등록된 전화번호입니다.</ErrorMessage>}\n                </div>\n                {renderSubmitBtn()}\n            </form>\n        </Center>\n    );\n};\n\nexport default SignUpPage;\n","import { useState } from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\n\r\nimport LogOutMain from './components/LogOutMain';\r\nimport LogInMain from './components/LogInMain';\r\nimport LogInPage from './components/LogInPage';\r\nimport SignUpPage from './components/SignUpPage';\r\n\r\nconst App = () => {\r\n    const [login, setLogin] = useState(false);\r\n\r\n    return (\r\n        <Router>\r\n            <Switch>\r\n                {login ? (\r\n                    <Route exact path=\"/\" component={LogInMain} />\r\n                ) : (\r\n                    <Route exact path=\"/\" component={LogOutMain} />\r\n                )}\r\n                <Route exact path=\"/login\" component={LogInPage} />\r\n                <Route exact path=\"/signup\" component={SignUpPage} />\r\n            </Switch>\r\n        </Router>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { combineReducers } from 'redux';\r\n\r\nimport user from './users';\r\n\r\nconst rootReducer = combineReducers({\r\n    user,\r\n});\r\n\r\nexport default rootReducer;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport './index.css';\r\n\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport rootReducer from './reducers/index';\r\nimport promiseMiddleware from 'redux-promise';\r\nimport ReduxThunk from 'redux-thunk';\r\n\r\nconst createStoreWithMMiddleware = applyMiddleware(\r\n    promiseMiddleware,\r\n    ReduxThunk,\r\n)(createStore);\r\n\r\nReactDOM.render(\r\n    <Provider\r\n        store={createStoreWithMMiddleware(\r\n            rootReducer,\r\n            window.__REDUX_DEVTOOLS_EXTENSION__ &&\r\n                window.__REDUX_DEVTOOLS_EXTENSION__(),\r\n        )}\r\n    >\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}