{"version":3,"sources":["hoc/auth.js","components/Center.js","components/Button.js","components/LogOutMain.js","components/Main.js","reducers/users.js","components/LogInPage.js","components/ErrorMessage.js","components/SignUpPage.js","components/Chat.js","components/Need.js","components/ChatWithDev.js","components/WritePage.js","App.js","reportWebVitals.js","reducers/index.js","sagas/user.js","sagas/index.js","index.js"],"names":["Component","option","AuthenticateCheck","props","isLoggedIn","useSelector","state","user","useEffect","history","push","Center","styled","div","Button","button","LogOutMain","to","style","marginBottom","Main","initialState","logInError","nickname","phone","role","REGISTER_USER","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","registerAction","data","type","reducer","action","LoginBox","withRouter","dispatch","useDispatch","useState","setNickname","onChangeNickname","useCallback","e","target","value","setPhone","onChangePhone","onSubmitForm","onSubmit","aria-label","htmlFor","id","onChange","autoFocus","pattern","maxLength","title","ErrorMessage","InputBox","setRole","onChangeRole","checked","registerError","axios","post","onClick","height","fontSize","borderRadius","Chat","Need","ChatWithDev","WritePage","App","exact","path","component","Auth","LogInPage","SignUpPage","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","login","watchLogin","userSaga","loginAPI","call","result","console","log","put","error","response","takeLatest","all","fork","rootSaga","sagaMiddleware","createSagaMiddleware","configureStore","applyMiddleware","promiseMiddleware","ReduxThunk","createStore","createStoreWithMMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","sagaTask","run","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.9e305d2c.chunk.js","sourcesContent":["import { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\n\nexport default (Component, option, adminRoute = null) => {\n    /*\n    option: null => 누구나 출입가능한 페이지\n          : true => 로그인한 유저만 출입가능한 페이지 \n          : false => 로그인한 유저는 출입 불가능한 페이지 \n    */\n\n    const AuthenticateCheck = (props) => {\n        const isLoggedIn = useSelector((state) => state.user.isLoggedIn);\n\n        useEffect(() => {\n            // 로그인 되어 있지 않다면, logOutMain으로 이동시키기\n            if (!isLoggedIn && option) {\n                props.history.push('/');\n            }\n        }, []);\n\n        return <Component />;\n    };\n\n    return AuthenticateCheck;\n};\n","import styled from 'styled-components';\r\n\r\nconst Center = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: 100%;\r\n    height: 100vh;\r\n`;\r\n\r\nexport default Center;\r\n","import styled from 'styled-components';\r\n\r\nconst Button = styled.button`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    width: 25rem;\r\n    height: 13rem;\r\n    font-size: 3.1rem;\r\n    font-weight: 700;\r\n    cursor: pointer;\r\n    border-radius: 10px;\r\n    border-color: #ffd300;\r\n    color: #000;\r\n    background-color: #ffd300;\r\n\r\n    &:focus {\r\n        outline-color: #ffd300;\r\n    }\r\n\r\n    @media screen and (min-width: 768px) {\r\n        width: 45rem;\r\n        height: 20rem;\r\n        font-size: 5.5rem;\r\n    }\r\n`;\r\n\r\nexport default Button;\r\n","import { Link } from 'react-router-dom';\r\n\r\nimport Center from './Center';\r\nimport Button from './Button';\r\n\r\nconst LogOutMain = () => {\r\n    return (\r\n        <Center>\r\n            <Link to=\"/login\" style={{ marginBottom: '2rem' }}>\r\n                <Button>로그인하러 가기</Button>\r\n            </Link>\r\n            <Link to=\"/signup\">\r\n                <Button>회원가입하러 가기</Button>\r\n            </Link>\r\n        </Center>\r\n    );\r\n};\r\n\r\nexport default LogOutMain;\r\n","import { Link } from 'react-router-dom'; \n\nimport Center from './Center';\nimport Button from './Button';\n\nconst Main = () => {\n    return (\n        <Center>\n            <Link to=\"/chat\" style={{ marginBottom: '2rem' }}>\n                <Button>잡담해요</Button>\n            </Link>\n            <Link to=\"/need\" style={{ marginBottom: '2rem' }}>\n                <Button>필요해요</Button>\n            </Link>\n            <Link to=\"/chatwithdev\">\n                <Button>개발자와 소통해요</Button>\n            </Link>\n        </Center>\n    );\n};\n\nexport default Main;\n","import axios from 'axios';\r\n\r\nexport const initialState = {\r\n    logInError: null, \r\n    isLoggedIn: false,\r\n    nickname: '',\r\n    phone: '',\r\n    role: 'user',\r\n};\r\n\r\n// action type\r\nexport const REGISTER_USER = 'REGISTER_USER';\r\nexport const LOG_IN_REQUEST = 'LOG_IN_REQUEST';\r\nexport const LOG_IN_SUCCESS = 'LOG_IN_SUCCESS';\r\nexport const LOG_IN_FAILURE = 'LOG_IN_FAILURE';\r\n\r\nexport const registerUser = (data) => {\r\n    return (dispatch) => {\r\n        axios.post('http://localhost:8080/users', data);\r\n        dispatch(registerAction(data));\r\n    };\r\n};\r\n\r\n// action creator\r\nexport const registerAction = (data) => {\r\n    return {\r\n        type: REGISTER_USER,\r\n        data,\r\n    };\r\n};\r\n\r\nexport const loginRequestAction = (data) => {\r\n    return {\r\n        type: LOG_IN_REQUEST,\r\n        data,\r\n    };\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case REGISTER_USER:\r\n            return {\r\n                ...state,\r\n                isLoggedIn: true,\r\n                nickname: action.data.nickname,\r\n                phone: action.data.phone,\r\n                role: action.data.role,\r\n            };\r\n        case LOG_IN_REQUEST:\r\n            return {\r\n                logInError: null,\r\n                nickname: action.data.nickname,\r\n                phone: action.data.phone,\r\n            };\r\n        case LOG_IN_SUCCESS:\r\n            return{\r\n                isLoggedIn: true,\r\n                nickname: action.data.nickname,\r\n                phone: action.data.phone,\r\n            }\r\n        case LOG_IN_FAILURE:\r\n            return{\r\n                isLoggedIn: true,\r\n                logInError: true, \r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n","import { useState, useCallback, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\n\r\nimport Center from './Center';\r\nimport Button from './Button';\r\nimport { loginRequestAction } from '../reducers/users';\r\n\r\nconst LoginBox = styled.div`\r\n    & > label {\r\n        display: block;\r\n        margin-bottom: 0.5rem;\r\n        font-size: 2rem;\r\n        color: #ffd300;\r\n\r\n        @media screen and (min-width: 768px) {\r\n            font-size: 3rem;\r\n        }\r\n    }\r\n\r\n    & > input {\r\n        width: 30rem;\r\n        height: 5rem;\r\n        margin-bottom: 3rem;\r\n        font-size: 2.4rem;\r\n        border-radius: 6px;\r\n\r\n        @media screen and (min-width: 768px) {\r\n            width: 50rem;\r\n        }\r\n    }\r\n\r\n    & ~ button {\r\n        width: 30rem;\r\n        height: 6rem;\r\n        font-size: 3rem;\r\n\r\n        @media screen and (min-width: 768px) {\r\n            width: 50rem;\r\n        }\r\n    }\r\n`;\r\n\r\nconst LogInPage = (props) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const [nickname, setNickname] = useState('');\r\n    const onChangeNickname = useCallback(\r\n        (e) => {\r\n            setNickname(e.target.value);\r\n        },\r\n        [nickname],\r\n    );\r\n\r\n    const [phone, setPhone] = useState('');\r\n    const onChangePhone = useCallback(\r\n        (e) => {\r\n            setPhone(e.target.value);\r\n        },\r\n        [phone],\r\n    );\r\n\r\n    const onSubmitForm = useCallback((e) => {\r\n        // e.preventDefault();\r\n        dispatch(loginRequestAction({ nickname, phone })); \r\n            // .then(response => {\r\n            //     console.log(response);\r\n            //     if(response.success){\r\n            //         dispatch(loginAction({ nickname, phone }));\r\n            //         props.history.push('/main');\r\n            //     }\r\n            //     else{\r\n            //         return alert('닉네임과 비밀번호를 다시 확인해주세요.'); \r\n            //     }\r\n            // })\r\n            // .catch(err => console.log(err));\r\n        \r\n    }, [nickname, phone]);\r\n\r\n    // const isLoggedIn = useSelector((state) => state.user.isLoggedIn); \r\n    // useEffect(() => {\r\n    //     if(isLoggedIn){\r\n    //         props.history.push('/main');\r\n    //     }\r\n    // }, [isLoggedIn]);\r\n\r\n    return (\r\n        <Center>\r\n            <form onSubmit={onSubmitForm} aria-label=\"로그인 폼입니다.\">\r\n                <LoginBox>\r\n                    <label htmlFor=\"nickname\">닉네임을 입력해주세요</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        id=\"nickname\"\r\n                        value={nickname}\r\n                        onChange={onChangeNickname}\r\n                        autoFocus\r\n                    />\r\n                    <label htmlFor=\"phone\">전화번호를 입력해주세요</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        id=\"phone\"\r\n                        value={phone}\r\n                        onChange={onChangePhone}\r\n                        pattern=\"[0-9]{3}-[0-9]{4}-[0-9]{4}\"\r\n                        maxLength=\"13\"\r\n                        title=\"010-0000-0000 형식으로 입력해주세요.\"\r\n                    />\r\n                </LoginBox>\r\n                <Button type=\"submit\">로그인하기</Button>\r\n            </form>\r\n        </Center>\r\n    );\r\n};\r\n\r\nexport default withRouter(LogInPage);\r\n","import styled from 'styled-components';\n\nconst ErrorMessage = styled.div`\n    width: 30rem;\n    font-size: 2rem;\n    color: red;\n\n    @media screen and (min-width: 768px) {\n        width: 50rem;\n        font-size: 2.5rem;\n    }\n`;\n\nexport default ErrorMessage;\n","import styled from 'styled-components';\nimport { useState, useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport axios from 'axios';\n\nimport Center from './Center';\nimport Button from './Button';\nimport { registerUser } from '../reducers/users';\nimport ErrorMessage from './ErrorMessage';\n\nconst InputBox = styled.div`\n    display: flex;\n    align-items: center;\n    width: 30rem;\n    margin-bottom: 3rem;\n\n    @media screen and (min-width: 768px) {\n        width: 50rem;\n    }\n\n    & > input {\n        width: 4rem;\n        height: 4rem;\n        margin-right: 2.7rem;\n    }\n\n    & > label {\n        font-size: 2.1rem;\n        color: #ffd300;\n\n        @media screen and (min-width: 768px) {\n            font-size: 4rem;\n        }\n    }\n\n    & ~ div {\n        display: flex;\n        flex-direction: column;\n        width: 30rem;\n        // margin-bottom: 3rem;\n\n        @media screen and (min-width: 768px) {\n            width: 50rem;\n        }\n\n        & > label {\n            display: inline-block;\n            margin-bottom: 0.5rem;\n            font-size: 2rem;\n            color: #ffd300;\n\n            @media screen and (min-width: 768px) {\n                font-size: 3rem;\n            }\n        }\n\n        & > input {\n            margin-bottom: 3rem;\n        }\n    }\n\n    & ~ button {\n        width: 30rem;\n        height: 6rem;\n        font-size: 3rem;\n\n        @media screen and (min-width: 768px) {\n            width: 50rem;\n        }\n    }\n`;\n\nconst SignUpPage = (props) => {\n    const dispatch = useDispatch();\n\n    const [role, setRole] = useState('user');\n    const onChangeRole = useCallback(\n        (e) => {\n            if (e.target.checked) {\n                setRole('dev');\n            } else {\n                setRole('user');\n            }\n        },\n        [role],\n    );\n\n    const [nickname, setNickname] = useState('');\n    const onChangeNickname = useCallback(\n        (e) => {\n            setNickname(e.target.value);\n        },\n        [nickname],\n    );\n\n    const [phone, setPhone] = useState('');\n    const onChangePhone = useCallback(\n        (e) => {\n            setPhone(e.target.value);\n        },\n        [phone],\n    );\n\n    // 이미 등록된 사용자 혹은 전화번호인지 확인\n    const [registered, setRegistered] = useState(true);\n\n    const checkRegistered = () => {\n        // 등록된 사용자인지 확인\n        // 예를 들어, 등록된 사용자다.\n        setRegistered(true);\n    };\n\n    const [registerError, setRegisterError] = useState(false);\n\n    const onSubmitForm = useCallback(() => {\n        // 전화번호 중복 확인\n        // if(){ //중복이라면\n        //     setRegistered(true);\n        // }\n\n        // 중복이라면 경고 메세지 띄우고,\n        // if (registered) {\n        //     setPhone('');\n        //     return alert('이미 등록된 사용자입니다. 전화번호를 다시 입력해주십시오.');\n        // }\n        dispatch(registerUser({ role, phone, nickname }));\n        props.history.push('/main');\n    }, [role, phone, nickname]);\n\n    return (\n        <Center>\n            <form onSubmit={onSubmitForm} aria-label=\"회원가입 폼입니다.\">\n                <InputBox>\n                    <input type=\"checkbox\" id=\"role\" value={role} onClick={onChangeRole} />\n                    <label htmlFor=\"role\">개발자라면 클릭해주세요.</label>\n                </InputBox>\n                <div>\n                    <label htmlFor=\"nickname\">닉네임을 입력해주세요</label>\n                    <input\n                        type=\"text\"\n                        id=\"nickname\"\n                        value={nickname}\n                        onChange={onChangeNickname}\n                        autoFocus\n                        style={{\n                            height: '5rem',\n                            fontSize: '2.4rem',\n                            borderRadius: '6px',\n                        }}\n                    />\n                    <label htmlFor=\"phone\">전화번호를 입력해주세요</label>\n                    <input\n                        type=\"text\"\n                        id=\"phone\"\n                        value={phone}\n                        onChange={onChangePhone}\n                        pattern=\"[0-9]{3}-[0-9]{4}-[0-9]{4}\"\n                        maxLength=\"13\"\n                        title=\"010-0000-0000 형식으로 입력해주세요.\"\n                        style={{\n                            height: '5rem',\n                            fontSize: '2.4rem',\n                            borderRadius: '6px',\n                        }}\n                    />\n                    {registerError && <ErrorMessage>이미 등록된 전화번호입니다.</ErrorMessage>}\n                </div>\n                <Button type=\"submit\">회원가입하기</Button>\n            </form>\n        </Center>\n    );\n};\n\nexport default withRouter(SignUpPage);\n","import { Link } from 'react-router-dom'; \n\nimport Center from './Center'; \nimport Button from './Button'; \n\nconst Chat = () => {\n    return (\n        <Center>\n            <Link to=\"/write\">\n                <Button>글쓰기</Button>\n            </Link>\n        </Center>\n    )\n}\n\nexport default Chat; ","import { Link } from 'react-router-dom'; \n\nimport Center from './Center'; \nimport Button from './Button'; \n\nconst Need = () => {\n    return (\n        <Center>\n            <Link to=\"/write\">\n                <Button>글쓰기</Button>\n            </Link>\n        </Center>\n    )\n}\n\nexport default Need; ","import { Link } from 'react-router-dom'; \n\nimport Center from './Center'; \nimport Button from './Button'; \n\nconst ChatWithDev = () => {\n    return (\n        <Center>\n            <Link to=\"/write\">\n                <Button>글쓰기</Button>\n            </Link>\n        </Center>\n    )\n}\n\nexport default ChatWithDev; ","import { Link } from 'react-router-dom'; \n\nimport Center from './Center';  \n\nconst WritePage = () => {\n    return (\n        <Center>\n            \n        </Center>\n    )\n}\n\nexport default WritePage; ","import { useState } from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux'; \r\n\r\nimport Auth from './hoc/auth';\r\nimport LogOutMain from './components/LogOutMain';\r\nimport Main from './components/Main';\r\nimport LogInPage from './components/LogInPage';\r\nimport SignUpPage from './components/SignUpPage';\r\nimport Chat from './components/Chat'; \r\nimport Need from './components/Need'; \r\nimport ChatWithDev from './components/ChatWithDev'; \r\nimport WritePage from './components/WritePage';\r\n\r\nconst App = () => {\r\n    const isLoggedIn = useSelector((state) => state.user.isLoggedIn);\r\n\r\n    return (\r\n        <Router>\r\n            <Switch>\r\n                {/* {isLoggedIn ? (\r\n                    <Route exact path=\"/main\" component={Auth(Main, true)} />\r\n                ) : (\r\n                    <Route exact path=\"/\" component={Auth(LogOutMain, false)} />\r\n                )} */}\r\n                <Route exact path=\"/\" component={Auth(LogOutMain, false)} />\r\n                <Route exact path=\"/login\" component={Auth(LogInPage, false)} />\r\n                <Route exact path=\"/signup\" component={Auth(SignUpPage, false)} />\r\n                <Route exact path=\"/main\" component={Auth(Main, true)} />\r\n                <Route exact path=\"/chat\" component={Auth(Chat, true)} />\r\n                <Route exact path=\"/need\" component={Auth(Need, true)} />\r\n                <Route exact path=\"/chatwithdev\" component={Auth(ChatWithDev, true)} />\r\n                <Route exact path=\"/write\" component={Auth(WritePage, true)} />\r\n                <Route path=\"/*\">404 Not Found</Route>\r\n            </Switch>\r\n        </Router>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { combineReducers } from 'redux';\r\n\r\nimport user from './users';\r\n\r\nconst rootReducer = combineReducers({\r\n    user,\r\n});\r\n\r\nexport default rootReducer;\r\n","import axios from 'axios';\nimport { all, call, fork, put, takeLatest, delay } from 'redux-saga/effects';\n\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE } from '../reducers/users'\n\nfunction loginAPI(data){\n    // 서버에 요청을 보내는 부분 \n    return axios.post('http://localhost:8080/login', data); \n}\n\nfunction* login(action){\n    try{\n        const result = yield call(loginAPI, action.data);\n        yield console.log(axios.post('http://localhost:8080/login', action.data));\n        yield put({ // put은 dispatch와 동일 \n            type: LOG_IN_SUCCESS, \n            data: result.data,\n        });    \n    } catch(e){ // loginAPI 실패\n        console.error(e); \n        yield put({\n            type: LOG_IN_FAILURE, \n            error: e.response.data,\n        }); \n        // alert('로그인 정보를 다시 확인해주세요');\n    }\n}\n\nfunction* watchLogin(){\n    yield takeLatest(LOG_IN_REQUEST, login)\n}\n\nexport default function* userSaga(){\n    yield all([\n        fork(watchLogin), \n    ])\n}","import { all, call } from 'redux-saga/effects';\n\nimport user from './user'; \n\nexport default function* rootSaga(){\n    yield all([\n        call(user),\n    ]);\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport './index.css';\r\n\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware } from 'redux'; \r\nimport promiseMiddleware from 'redux-promise';\r\nimport ReduxThunk from 'redux-thunk';\r\nimport createSagaMiddleware from 'redux-saga'; \r\n\r\nimport rootReducer from './reducers/index';\r\nimport rootSaga from './sagas/index';\r\n\r\nconst sagaMiddleware = createSagaMiddleware(); \r\n\r\nconst createStoreWithMMiddleware = applyMiddleware(\r\n    promiseMiddleware,\r\n    ReduxThunk,\r\n    sagaMiddleware,\r\n)(createStore);\r\n\r\nconst configureStore = createStoreWithMMiddleware(\r\n    rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ &&\r\n    window.__REDUX_DEVTOOLS_EXTENSION__(),);\r\nconfigureStore.sagaTask = sagaMiddleware.run(rootSaga);\r\n\r\nReactDOM.render(\r\n    <Provider\r\n        store={configureStore}\r\n    >\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}