{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"8class.ipynb의 사본의 사본","provenance":[{"file_id":"1xcfnFX0v9v9EoAQbVcr9YdM_jR9Iv3n4","timestamp":1614606028666},{"file_id":"1GZHOqAU7sg8GNSvC5zd6m9HQ_s51Ihrk","timestamp":1603723495880},{"file_id":"1oGXlUH5nZpY0DtvyD3aNF9BJ8PBZ7xvr","timestamp":1603713775301},{"file_id":"1twNetFPIoMKNy13z_URcoMnz3lM2UBEM","timestamp":1602893130525}],"collapsed_sections":[],"machine_shape":"hm"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"ZZl7wGWNzE9q"},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"LoD-DWn6HpZg","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1614607726477,"user_tz":-540,"elapsed":932,"user":{"displayName":"박시연","photoUrl":"","userId":"17145214670422392924"}},"outputId":"19b0224b-0d57-4c33-d353-450a4ee4fc38"},"source":["import os\n","import glob\n","import numpy as np\n","from PIL import Image\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","\n","from sklearn.model_selection import train_test_split\n","\n","import tensorflow as tf\n","from tensorflow import keras\n","\n","from tensorflow.keras import layers\n","from keras.utils.vis_utils import model_to_dot\n","\n","\n","print(tf.__version__)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["2.4.1\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Ir165fXZB9Hx"},"source":["labelNames = ['0', '1', '2', '3','4','5','6','7']\n","classDic = {0:0, 1:1, 2:2, 3:3, 4:4, 5:5, 6:6, 7:7}\n","classNames = ['pocari','letsbe','hotsix', 'cola', '식혜', '사이다', '밀키스', '데자와']\n","\n","\n","dir = \"/content/drive/Shareddrives/TimmyRoom/image_resize\""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"zaVHLYcfvFgQ"},"source":["def sampling(data, per):\n","    np.random.seed(123)\n","    N = len(data)\n","    sample_n = int(len(data)*per)\n","    sample = data.take(np.random.permutation(N)[:sample_n])\n","    return sample"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"_Q14HtcnvGCG"},"source":["from tensorflow.keras.preprocessing.image import ImageDataGenerator, array_to_img, img_to_array, load_img\n","\n","datagenerator = ImageDataGenerator(\n","    #rescale=1./255,\n","    rotation_range=40,\n","    width_shift_range=0.2,\n","    height_shift_range=0.2,        \n","    shear_range=0.2,\n","    zoom_range=0.2,\n","    horizontal_flip=True,\n","    fill_mode='nearest'\n",")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qWzWQ5sLCFrZ","executionInfo":{"status":"ok","timestamp":1614607734964,"user_tz":-540,"elapsed":2384,"user":{"displayName":"박시연","photoUrl":"","userId":"17145214670422392924"}},"outputId":"2178cd54-3a6d-4437-c883-e55a361b3670"},"source":["import numpy as np\n","import pandas as pd\n","\n","x_train = []\n","y_train = []\n","x_test = []\n","y_test = []\n","fileNames = []\n","\n","for idx, cat in enumerate(labelNames):\n","\n","    label = [0 for i in range(len(classNames))]\n","    label[classDic[idx]] = 1\n","\n","    imgDir = dir + \"/\" + cat\n","    files = glob.glob(imgDir+\"/*.jpg\")\n","    print(cat, \" 파일 길이 : \", len(files))\n","    \n","    i = 0\n","    lst = []\n","    for i in range(len(files)) :\n","        lst.append(i)\n","    lst = pd.DataFrame(lst, columns = ['idx'])\n","\n","    trainSet = lst.apply(sampling, per=0.95)\n","    trainSet = trainSet.sort_index()\n","\n","    testSet = lst.drop(lst.index[trainSet.index])\n","    testSet = testSet.sort_index()\n","\n","    trainSet = trainSet['idx'].values.tolist()\n","    testSet = testSet['idx'].values.tolist()\n","    \n","    for f in range(len(trainSet)):\n","        img = Image.open(files[trainSet[f]])\n","        img = img.convert(\"RGB\")\n","        data = np.asarray(img)\n","        \n","        if f == 0:\n","            print(label)\n","            \n","        x_train.append(data)\n","        y_train.append(label)\n","    \n","    for f in range(len(testSet)):\n","        img = Image.open(files[testSet[f]])\n","        img = img.convert(\"RGB\")\n","        data = np.asarray(img)\n","        \n","        if f == 0:\n","            print(label)\n","            \n","        x_test.append(data)\n","        y_test.append(label)\n","        fileNames.append(files[testSet[f]])\n","\n","x_train = np.array(x_train)\n","y_train = np.array(y_train)\n","\n","x_test = np.array(x_test)\n","y_test = np.array(y_test)\n","\n","print(x_train.shape)\n","print(y_train.shape)\n","\n","print(\"ok\", len(x_train), len(x_test))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["0  파일 길이 :  172\n","[1, 0, 0, 0, 0, 0, 0, 0]\n","[1, 0, 0, 0, 0, 0, 0, 0]\n","1  파일 길이 :  168\n","[0, 1, 0, 0, 0, 0, 0, 0]\n","[0, 1, 0, 0, 0, 0, 0, 0]\n","2  파일 길이 :  156\n","[0, 0, 1, 0, 0, 0, 0, 0]\n","[0, 0, 1, 0, 0, 0, 0, 0]\n","3  파일 길이 :  29\n","[0, 0, 0, 1, 0, 0, 0, 0]\n","[0, 0, 0, 1, 0, 0, 0, 0]\n","4  파일 길이 :  210\n","[0, 0, 0, 0, 1, 0, 0, 0]\n","[0, 0, 0, 0, 1, 0, 0, 0]\n","5  파일 길이 :  37\n","[0, 0, 0, 0, 0, 1, 0, 0]\n","[0, 0, 0, 0, 0, 1, 0, 0]\n","6  파일 길이 :  229\n","[0, 0, 0, 0, 0, 0, 1, 0]\n","[0, 0, 0, 0, 0, 0, 1, 0]\n","7  파일 길이 :  141\n","[0, 0, 0, 0, 0, 0, 0, 1]\n","[0, 0, 0, 0, 0, 0, 0, 1]\n","(1081, 150, 150, 3)\n","(1081, 8)\n","ok 1081 61\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"wouOMiRlCIIa"},"source":["np.savez(\"imageData\", x_train = x_train, y_train = y_train, x_test = x_test, y_test = y_test)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"YpCCV6uDzMKi","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1614607739583,"user_tz":-540,"elapsed":951,"user":{"displayName":"박시연","photoUrl":"","userId":"17145214670422392924"}},"outputId":"7dd9d890-b34b-4b39-e48f-e739508fff77"},"source":["import os, glob, numpy as np\n","from tensorflow.keras.models import Sequential, Model\n","from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dense, Flatten, Dropout\n","from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint\n","import matplotlib.pyplot as plt\n","from tensorflow.keras import backend as K\n","\n","import tensorflow as tf\n","config = tf.config.experimental\n","\n","\n","imageLoad = np.load('/content/imageData.npz')\n","x_train = imageLoad['x_train']\n","y_train = imageLoad['y_train']\n","x_test = imageLoad['x_test']\n","y_test = imageLoad['y_test']\n","print(x_train.shape)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(1081, 150, 150, 3)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"bx6mm7QwzTEV"},"source":["x_train = x_train.astype(float) / 255\n","x_test = x_test.astype(float) / 255"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"pmzHFAvbHqIs"},"source":["x_train, x_valid, y_train, y_valid = train_test_split(x_train, y_train, test_size = 0.1)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"-W9DM2r8vnCM"},"source":["\n","from keras.applications.inception_resnet_v2 import InceptionResNetV2, preprocess_input\n","\n","base_model = InceptionResNetV2(include_top=False, pooling='avg')\n","outputs = Dense(8, activation='softmax')(base_model.output)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"JYK9rrBAzdOR","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1614607850953,"user_tz":-540,"elapsed":5354,"user":{"displayName":"박시연","photoUrl":"","userId":"17145214670422392924"}},"outputId":"759cbea6-8d61-45eb-8fd4-102cde9503b2"},"source":["base_model.trainable = True\n","\n","print(\"Number of layers in the base model: \", len(base_model.layers))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Number of layers in the base model:  781\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"haiW74X70FcW"},"source":["model = Model(base_model.inputs, outputs)\n","model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n","model_dir = './model'\n","    \n","early_stopping = EarlyStopping(monitor='val_loss', patience=6)\n","checkpointer = ModelCheckpoint(filepath='/content/drive/Shareddrives/TimmyRoom/check',\n","                              verbose=1, save_best_only=True)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"cmU9KozJ1bnn","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1614607850954,"user_tz":-540,"elapsed":3840,"user":{"displayName":"박시연","photoUrl":"","userId":"17145214670422392924"}},"outputId":"a7ab17bd-9520-48db-fca9-3be772a3372e"},"source":["x_train, x_valid, y_train, y_valid = train_test_split(x_train, y_train, test_size = 0.1)\n","print(x_train.shape)\n","print(x_valid.shape)\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(786, 150, 150, 3)\n","(88, 150, 150, 3)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"_9CG1NL91cys","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1614608680831,"user_tz":-540,"elapsed":830309,"user":{"displayName":"박시연","photoUrl":"","userId":"17145214670422392924"}},"outputId":"25d9606d-3c34-4688-ed28-ae94a70c7f8b"},"source":["history = model.fit_generator(datagenerator.flow(x_train, y_train, batch_size=32),\n","                                      steps_per_epoch=x_train.shape[0]//32,\n","                                      epochs = 100, verbose=2, callbacks=[checkpointer, early_stopping],\n","                                      validation_data=(x_valid, y_valid))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/tensorflow/python/keras/engine/training.py:1844: UserWarning: `Model.fit_generator` is deprecated and will be removed in a future version. Please use `Model.fit`, which supports generators.\n","  warnings.warn('`Model.fit_generator` is deprecated and '\n"],"name":"stderr"},{"output_type":"stream","text":["Epoch 1/100\n","24/24 - 25s - loss: 0.4340 - accuracy: 0.8740 - val_loss: 2571.7305 - val_accuracy: 0.2045\n","\n","Epoch 00001: val_loss improved from inf to 2571.73047, saving model to /content/drive/Shareddrives/TimmyRoom/check\n","INFO:tensorflow:Assets written to: /content/drive/Shareddrives/TimmyRoom/check/assets\n","Epoch 2/100\n","24/24 - 4s - loss: 0.1053 - accuracy: 0.9735 - val_loss: 173957.9531 - val_accuracy: 0.2045\n","\n","Epoch 00002: val_loss did not improve from 2571.73047\n","Epoch 3/100\n","24/24 - 7s - loss: 0.0842 - accuracy: 0.9695 - val_loss: 9312.9316 - val_accuracy: 0.3750\n","\n","Epoch 00003: val_loss did not improve from 2571.73047\n","Epoch 4/100\n","24/24 - 4s - loss: 0.1831 - accuracy: 0.9629 - val_loss: 22.1303 - val_accuracy: 0.3295\n","\n","Epoch 00004: val_loss improved from 2571.73047 to 22.13027, saving model to /content/drive/Shareddrives/TimmyRoom/check\n","INFO:tensorflow:Assets written to: /content/drive/Shareddrives/TimmyRoom/check/assets\n","Epoch 5/100\n","24/24 - 4s - loss: 0.1621 - accuracy: 0.9536 - val_loss: 106.1975 - val_accuracy: 0.2273\n","\n","Epoch 00005: val_loss did not improve from 22.13027\n","Epoch 6/100\n","24/24 - 4s - loss: 0.1376 - accuracy: 0.9562 - val_loss: 2.1349 - val_accuracy: 0.7386\n","\n","Epoch 00006: val_loss improved from 22.13027 to 2.13488, saving model to /content/drive/Shareddrives/TimmyRoom/check\n","INFO:tensorflow:Assets written to: /content/drive/Shareddrives/TimmyRoom/check/assets\n","Epoch 7/100\n","24/24 - 5s - loss: 0.0371 - accuracy: 0.9894 - val_loss: 0.2252 - val_accuracy: 0.9432\n","\n","Epoch 00007: val_loss improved from 2.13488 to 0.22521, saving model to /content/drive/Shareddrives/TimmyRoom/check\n","INFO:tensorflow:Assets written to: /content/drive/Shareddrives/TimmyRoom/check/assets\n","Epoch 8/100\n","24/24 - 4s - loss: 0.0598 - accuracy: 0.9828 - val_loss: 0.1784 - val_accuracy: 0.9659\n","\n","Epoch 00008: val_loss improved from 0.22521 to 0.17841, saving model to /content/drive/Shareddrives/TimmyRoom/check\n","INFO:tensorflow:Assets written to: /content/drive/Shareddrives/TimmyRoom/check/assets\n","Epoch 9/100\n","24/24 - 4s - loss: 0.0368 - accuracy: 0.9894 - val_loss: 0.1856 - val_accuracy: 0.9091\n","\n","Epoch 00009: val_loss did not improve from 0.17841\n","Epoch 10/100\n","24/24 - 9s - loss: 0.0826 - accuracy: 0.9870 - val_loss: 0.1981 - val_accuracy: 0.9886\n","\n","Epoch 00010: val_loss did not improve from 0.17841\n","Epoch 11/100\n","24/24 - 4s - loss: 0.0188 - accuracy: 0.9947 - val_loss: 0.1873 - val_accuracy: 0.9773\n","\n","Epoch 00011: val_loss did not improve from 0.17841\n","Epoch 12/100\n","24/24 - 4s - loss: 0.0273 - accuracy: 0.9920 - val_loss: 0.0664 - val_accuracy: 0.9886\n","\n","Epoch 00012: val_loss improved from 0.17841 to 0.06643, saving model to /content/drive/Shareddrives/TimmyRoom/check\n","INFO:tensorflow:Assets written to: /content/drive/Shareddrives/TimmyRoom/check/assets\n","Epoch 13/100\n","24/24 - 4s - loss: 0.0160 - accuracy: 0.9960 - val_loss: 0.0145 - val_accuracy: 0.9886\n","\n","Epoch 00013: val_loss improved from 0.06643 to 0.01453, saving model to /content/drive/Shareddrives/TimmyRoom/check\n","INFO:tensorflow:Assets written to: /content/drive/Shareddrives/TimmyRoom/check/assets\n","Epoch 14/100\n","24/24 - 4s - loss: 0.0116 - accuracy: 0.9934 - val_loss: 0.1142 - val_accuracy: 0.9773\n","\n","Epoch 00014: val_loss did not improve from 0.01453\n","Epoch 15/100\n","24/24 - 4s - loss: 0.0200 - accuracy: 0.9881 - val_loss: 0.0127 - val_accuracy: 1.0000\n","\n","Epoch 00015: val_loss improved from 0.01453 to 0.01269, saving model to /content/drive/Shareddrives/TimmyRoom/check\n","INFO:tensorflow:Assets written to: /content/drive/Shareddrives/TimmyRoom/check/assets\n","Epoch 16/100\n","24/24 - 4s - loss: 0.0127 - accuracy: 0.9947 - val_loss: 0.0339 - val_accuracy: 0.9886\n","\n","Epoch 00016: val_loss did not improve from 0.01269\n","Epoch 17/100\n","24/24 - 5s - loss: 0.0100 - accuracy: 0.9947 - val_loss: 0.2280 - val_accuracy: 0.9773\n","\n","Epoch 00017: val_loss did not improve from 0.01269\n","Epoch 18/100\n","24/24 - 5s - loss: 0.0394 - accuracy: 0.9881 - val_loss: 0.0115 - val_accuracy: 1.0000\n","\n","Epoch 00018: val_loss improved from 0.01269 to 0.01152, saving model to /content/drive/Shareddrives/TimmyRoom/check\n","INFO:tensorflow:Assets written to: /content/drive/Shareddrives/TimmyRoom/check/assets\n","Epoch 19/100\n","24/24 - 4s - loss: 0.0076 - accuracy: 1.0000 - val_loss: 0.0369 - val_accuracy: 0.9773\n","\n","Epoch 00019: val_loss did not improve from 0.01152\n","Epoch 20/100\n","24/24 - 4s - loss: 0.0094 - accuracy: 0.9987 - val_loss: 0.0371 - val_accuracy: 0.9773\n","\n","Epoch 00020: val_loss did not improve from 0.01152\n","Epoch 21/100\n","24/24 - 5s - loss: 0.0584 - accuracy: 0.9894 - val_loss: 0.0700 - val_accuracy: 0.9773\n","\n","Epoch 00021: val_loss did not improve from 0.01152\n","Epoch 22/100\n","24/24 - 4s - loss: 0.0412 - accuracy: 0.9907 - val_loss: 0.1441 - val_accuracy: 0.9545\n","\n","Epoch 00022: val_loss did not improve from 0.01152\n","Epoch 23/100\n","24/24 - 4s - loss: 0.0153 - accuracy: 0.9960 - val_loss: 0.0375 - val_accuracy: 0.9886\n","\n","Epoch 00023: val_loss did not improve from 0.01152\n","Epoch 24/100\n","24/24 - 8s - loss: 0.0285 - accuracy: 0.9907 - val_loss: 0.0235 - val_accuracy: 0.9886\n","\n","Epoch 00024: val_loss did not improve from 0.01152\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"bMttJCJg1dkN"},"source":["from keras.models import load_model\n","model.save('/content/drive/Shareddrives/TimmyRoom/model.hdf5')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"XVZc8VJbNqpP","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1614608686851,"user_tz":-540,"elapsed":833924,"user":{"displayName":"박시연","photoUrl":"","userId":"17145214670422392924"}},"outputId":"5083d982-f1f9-4e8a-9f7c-8b0d7b4b0620"},"source":["model.load_weights('/content/drive/Shareddrives/TimmyRoom/model.hdf5')\n","score = model.evaluate(x_test, y_test, verbose=0)\n","\n","print('\\n','Test accuracy:', score[1])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["\n"," Test accuracy: 0.9672130942344666\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"sLJd0fYinfca","colab":{"base_uri":"https://localhost:8080/","height":278},"executionInfo":{"status":"ok","timestamp":1614608686852,"user_tz":-540,"elapsed":833443,"user":{"displayName":"박시연","photoUrl":"","userId":"17145214670422392924"}},"outputId":"3e3d9675-2770-4962-e834-64b413c4b233"},"source":["y_vloss = history.history['val_loss']\n","y_loss = history.history['loss']\n","\n","x_len = np.arange(len(y_loss))\n","\n","plt.plot(x_len, y_vloss, marker='.', c='red', label='val_set_loss')\n","plt.plot(x_len, y_loss, marker='.', c='blue', label='train_set_oss')\n","plt.legend()\n","plt.xlabel('epochs')\n","plt.ylabel('loss')\n","plt.grid()\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"aeEdKzOMnf4y"},"source":[""],"execution_count":null,"outputs":[]}]}